import React, { useState } from 'react';
import { Save, Download, TrendingUp, Clock, DollarSign, Target, Mail } from 'lucide-react';
import Modal from '../common/Modal';

const Results = ({ results, input, onSaveScenario, loading }) => {
  const [showEmailModal, setShowEmailModal] = useState(false);
  const [email, setEmail] = useState('');
  const [reportLoading, setReportLoading] = useState(false);

  if (!results) return null;

  const metrics = [
    {
      label: "Monthly Savings",
      value: `$${results.monthly_savings?.toLocaleString() || '0'}`,
      description: "Recurring monthly cost reduction",
      icon: TrendingUp,
      highlight: true
    },
    {
      label: "Payback Period",
      value: `${results.payback_months || '0'} months`,
      description: "Time to recover implementation cost",
      icon: Clock
    },
    {
      label: "ROI",
      value: `${results.roi_percentage || '0'}%`,
      description: `Return over ${input?.time_horizon_months || 36} months`,
      icon: Target,
      highlight: true
    },
    {
      label: "Total Savings",
      value: `$${results.cumulative_savings?.toLocaleString() || '0'}`,
      description: `Cumulative ${input?.time_horizon_months || 36}-month benefit`,
      icon: DollarSign
    }
  ];

  const handleGenerateReport = async () => {
    if (!email) {
      alert('Please enter your email address');
      return;
    }

    setReportLoading(true);
    try {
      // Simulate report generation - in real app, this would call your backend
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Create a simple PDF report (in real app, this would be generated by backend)
      const reportContent = `
        INVOICING AUTOMATION ROI REPORT
        ================================
        
        Scenario: ${input.scenario_name}
        Generated for: ${email}
        Date: ${new Date().toLocaleDateString()}
        
        INPUT PARAMETERS:
        - Monthly Invoices: ${input.monthly_invoice_volume}
        - AP Staff: ${input.num_ap_staff}
        - Hourly Wage: $${input.hourly_wage}
        - Hours per Invoice: ${input.avg_hours_per_invoice}
        - Error Rate: ${input.error_rate_manual}%
        - Error Cost: $${input.error_cost}
        - Time Horizon: ${input.time_horizon_months} months
        - Implementation Cost: $${input.one_time_implementation_cost}
        
        RESULTS:
        - Monthly Savings: $${results.monthly_savings?.toLocaleString()}
        - Payback Period: ${results.payback_months} months
        - ROI: ${results.roi_percentage}%
        - Total Savings: $${results.cumulative_savings?.toLocaleString()}
        
        CONCLUSION:
        Automation shows significant cost savings with a ${results.payback_months}-month payback period.
      `;

      // Create and download the report
      const blob = new Blob([reportContent], { type: 'text/plain' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `roi-report-${input.scenario_name}-${Date.now()}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);

      alert(`Report sent to ${email} and downloaded!`);
      setShowEmailModal(false);
      setEmail('');
    } catch (error) {
      alert('Error generating report: ' + error.message);
    } finally {
      setReportLoading(false);
    }
  };

  return (
    <div className="results-container">
      <div className="results-header">
        <h2>ðŸŽ‰ ROI Analysis Complete!</h2>
        <p>Here's your automation payoff analysis for "{input?.scenario_name}"</p>
      </div>

      <div className="metrics-grid">
        {metrics.map((metric, index) => {
          const Icon = metric.icon;
          return (
            <div key={index} className={`metric-card ${metric.highlight ? 'highlight' : ''}`}>
              <div className="metric-icon">
                <Icon size={24} />
              </div>
              <div className="metric-content">
                <div className="metric-value">{metric.value}</div>
                <div className="metric-label">{metric.label}</div>
                <div className="metric-description">{metric.description}</div>
              </div>
            </div>
          );
        })}
      </div>

      <div className="breakdown-section">
        <h3>ðŸ“Š Cost Breakdown Analysis</h3>
        <div className="breakdown-grid">
          <div className="breakdown-item">
            <span className="breakdown-label">Current Manual Labor Cost:</span>
            <span className="breakdown-value">
              ${results.labor_cost_manual?.toLocaleString()}/month
            </span>
          </div>
          <div className="breakdown-item">
            <span className="breakdown-label">Automation Software Cost:</span>
            <span className="breakdown-value">
              ${results.auto_cost?.toLocaleString()}/month
            </span>
          </div>
          <div className="breakdown-item">
            <span className="breakdown-label">Error Cost Savings:</span>
            <span className="breakdown-value savings">
              ${results.error_savings?.toLocaleString()}/month
            </span>
          </div>
        </div>
      </div>

      <div className="action-buttons">
        <button 
          onClick={onSaveScenario}
          disabled={loading}
          className="btn-secondary"
        >
          <Save size={18} />
          Save This Scenario
        </button>
        
        <button 
          onClick={() => setShowEmailModal(true)} 
          className="btn-primary"
        >
          <Mail size={18} />
          Get Detailed Report
        </button>
      </div>

      {/* Email Modal for Report Generation */}
      <Modal 
        isOpen={showEmailModal} 
        onClose={() => setShowEmailModal(false)}
        title="ðŸ“§ Get Your Detailed ROI Report"
      >
        <div className="email-modal-content">
          <div className="email-icon">
            <Mail size={48} />
          </div>
          
          <p className="modal-description">
            Enter your email address to receive a detailed PDF report with complete analysis, 
            charts, and implementation recommendations.
          </p>

          <div className="form-group">
            <label htmlFor="email" className="input-label">
              Email Address
            </label>
            <input
              id="email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder="your.email@company.com"
              className="input"
              disabled={reportLoading}
            />
          </div>

          <div className="report-features">
            <h4>ðŸ“‹ Report Includes:</h4>
            <ul>
              <li>Complete ROI calculation breakdown</li>
              <li>Monthly and cumulative savings charts</li>
              <li>Payback period analysis</li>
              <li>Implementation roadmap</li>
              <li>Best practices for automation</li>
            </ul>
          </div>

          <div className="modal-actions">
            <button 
              onClick={() => setShowEmailModal(false)}
              disabled={reportLoading}
              className="btn-secondary"
            >
              Cancel
            </button>
            <button 
              onClick={handleGenerateReport}
              disabled={reportLoading || !email}
              className="btn-primary"
            >
              {reportLoading ? (
                <>
                  <div className="spinner"></div>
                  Generating Report...
                </>
              ) : (
                <>
                  <Download size={18} />
                  Send Report & Download
                </>
              )}
            </button>
          </div>
        </div>
      </Modal>
    </div>
  );
};

export default Results;